--- ./package.json ---
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.2.3",
    "@tailwindcss/vite": "^4.1.11",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.11",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/node": "^24.0.12",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "tw-animate-css": "^1.3.5",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^7.0.4"
  }
}

--- ./src/components/Scoreboard.tsx ---
// src/components/Scoreboard.tsx
import { useGameStore } from '@/store/gameStore';
import type { Player } from '../../../common/types/game';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export function Scoreboard() {
  const players = useGameStore((state) => state.gameState.players);
  const currentPlayerId = useGameStore((state) => state.playerId);

  // Get player avatar from their profile data
  const getPlayerAvatar = (player: Player) => {
    return `/avatars/${player.avatar || 1}.jpeg`;
  };

  // Sort players by score for the leaderboard
  const sortedPlayers = [...players].sort((a, b) => b.score - a.score);

  return (
    <Card>
      <CardHeader>
        <CardTitle>Scoreboard</CardTitle>
      </CardHeader>
      <CardContent>
        <ul className="space-y-2">
          {sortedPlayers.map((player, index) => {
            const avatarSrc = getPlayerAvatar(player);
            const isCurrentUser = player.id === currentPlayerId;
            return (
              <li 
                key={player.id} 
                className={`flex items-center justify-between p-2 rounded-md transition-all duration-200 ${
                  isCurrentUser 
                    ? 'bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-400/50 shadow-lg' 
                    : 'hover:bg-white/5'
                }`}
              >
                <div className="flex items-center gap-3">
                  <span className={`text-sm font-bold min-w-[20px] ${isCurrentUser ? 'text-blue-300' : ''}`}>
                    {index + 1}.
                  </span>
                  <img
                    src={avatarSrc}
                    alt={`${player.name}'s avatar`}
                    className={`w-8 h-8 rounded-full border transition-all duration-200 ${
                      isCurrentUser 
                        ? 'border-blue-400 shadow-md ring-2 ring-blue-400/30' 
                        : 'border-white/20'
                    }`}
                    onError={(e) => {
                      (e.target as HTMLImageElement).src = '/avatars/1.jpeg';
                    }}
                  />
                  <span className={`font-medium ${isCurrentUser ? 'text-blue-100 font-semibold' : ''}`}>
                    {player.name}
                    {isCurrentUser && <span className="ml-2 text-xs text-blue-300">(You)</span>}
                  </span>
                </div>
                <span className={`font-bold ${isCurrentUser ? 'text-blue-200' : ''}`}>
                  {player.score} pts
                </span>
              </li>
            );
          })}
        </ul>
      </CardContent>
    </Card>
  );
}

--- ./src/components/Profile.tsx ---
// src/components/Profile.tsx
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export interface ProfileData {
  id: string;
  name: string;
  avatar: number;
}

interface ProfileProps {
  onProfileComplete: (profile: ProfileData) => void;
  disabled?: boolean;
}

export function Profile({ onProfileComplete, disabled = false }: ProfileProps) {
  const [name, setName] = useState('');
  const [selectedAvatar, setSelectedAvatar] = useState(1);
  const [profile, setProfile] = useState<ProfileData | null>(null);

  // Load profile from localStorage on mount
  useEffect(() => {
    const savedProfile = localStorage.getItem('userProfile');
    if (savedProfile) {
      try {
        const parsedProfile = JSON.parse(savedProfile);
        setProfile(parsedProfile);
        setName(parsedProfile.name);
        setSelectedAvatar(parsedProfile.avatar);
        onProfileComplete(parsedProfile);
      } catch (error) {
        console.error('Error loading profile:', error);
      }
    }
  }, [onProfileComplete]);

  const generateId = () => {
    return Math.random().toString(36).substr(2, 9);
  };

  const saveProfile = () => {
    if (!name.trim()) return;

    const newProfile: ProfileData = {
      id: profile?.id || generateId(),
      name: name.trim(),
      avatar: selectedAvatar,
    };

    localStorage.setItem('userProfile', JSON.stringify(newProfile));
    setProfile(newProfile);
    onProfileComplete(newProfile);
  };

  const editProfile = () => {
    setProfile(null);
  };

  const avatarNumbers = Array.from({ length: 21 }, (_, i) => i + 1);

  if (profile && !disabled) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Your Profile</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center gap-4">
            <img
              src={`/avatars/${profile.avatar}.jpeg`}
              alt="Your avatar"
              className="w-16 h-16 rounded-full border-2 border-white/20"
              onError={(e) => {
                (e.target as HTMLImageElement).src = '/avatars/1.jpeg';
              }}
            />
            <div>
              <h3 className="font-semibold text-lg">{profile.name}</h3>
            </div>
          </div>
          <Button onClick={editProfile} variant="outline" className="w-full">
            Edit Profile
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Create Your Profile</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">Name</label>
          <Input
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            disabled={disabled}
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium mb-2">Choose Avatar</label>
          <div className="grid grid-cols-7 gap-2 max-h-48 overflow-y-auto">
            {avatarNumbers.map((avatarNum) => (
              <button
                key={avatarNum}
                onClick={() => setSelectedAvatar(avatarNum)}
                className={`w-10 h-10 rounded-full border-2 transition-all ${
                  selectedAvatar === avatarNum
                    ? 'border-blue-500 ring-2 ring-blue-500/30'
                    : 'border-white/20 hover:border-white/40'
                }`}
                disabled={disabled}
              >
                <img
                  src={`/avatars/${avatarNum}.jpeg`}
                  alt={`Avatar ${avatarNum}`}
                  className="w-full h-full rounded-full object-cover"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = '/avatars/1.jpeg';
                  }}
                />
              </button>
            ))}
          </div>
        </div>

        <Button 
          onClick={saveProfile} 
          className="w-full" 
          disabled={disabled || !name.trim()}
        >
          Save Profile
        </Button>
      </CardContent>
    </Card>
  );
}
--- ./src/components/GameActions.tsx ---
// src/components/GameActions.tsx
import { useGameStore } from '@/store/gameStore';
import type { Player } from '../../../common/types/game';
import { socketService } from '@/services/socketService';

export function GameActions() {
  const { activePlayerId, status, players } = useGameStore((state) => state.gameState);
  const myPlayerId = useGameStore((state) => state.playerId);

  const handlePassTurn = () => {
    socketService.passTurn();
  };

  const isMyTurn = activePlayerId === myPlayerId;
  const isAnsweringPhase = status === 'Answering';

  // Get top 3 players and user's rank
  const sortedPlayers = [...players].sort((a, b) => b.score - a.score);
  const myRank = sortedPlayers.findIndex(p => p.id === myPlayerId) + 1;
  const myPlayer = sortedPlayers.find(p => p.id === myPlayerId);
  
  // Get top 3 or fewer if less than 3 players
  const topPlayers = sortedPlayers.slice(0, Math.min(3, sortedPlayers.length));
  
  // Get player avatar from their profile data
  const getPlayerAvatar = (player: Player) => {
    return `/avatars/${player.avatar || 1}.jpeg`;
  };

  if (!isAnsweringPhase) {
    return null;
  }

  return (
    <div className="fixed bottom-0 left-0 right-0 glassmorphism border-t border-white/10 p-3 animate-slide-up">
      <div className="flex items-center justify-between max-w-full mx-auto px-2">
        {/* Compact Scoreboard - Top 3 Players */}
        <div className="flex items-center gap-2 flex-1">
          {topPlayers.slice(0, 3).map((player, index) => {
            const isMe = player.id === myPlayerId;
            return (
              <div key={player.id} className="flex items-center gap-1">
                <img 
                  src={getPlayerAvatar(player)}
                  alt={player.name}
                  className={`w-6 h-6 rounded-full border transition-all duration-200 ${
                    isMe ? 'border-blue-400 shadow-sm ring-1 ring-blue-400/30' : 'border-white/20'
                  }`}
                />
                <span className={`text-xs font-medium ${
                  isMe ? 'text-blue-200' : 'text-[var(--color-text-primary)]'
                }`}>
                  {player.score}
                  {isMe && <span className="text-blue-300 ml-0.5">*</span>}
                </span>
                {index < 2 && <span className="text-[var(--color-text-secondary)]">•</span>}
              </div>
            );
          })}
        </div>

        {/* Main Action Button */}
        {isMyTurn ? (
          <button 
            onClick={handlePassTurn}
            className="game-button-secondary flex items-center gap-1 px-4 py-2"
          >
            <span>⏭️</span>
            <span className="text-sm">Pass</span>
          </button>
        ) : (
          <div className="game-button-ghost flex items-center gap-1 px-4 py-2 opacity-50">
            <span>⏳</span>
            <span className="text-sm">Wait</span>
          </div>
        )}

        {/* User's Rank (if not in top 3) */}
        <div className="flex items-center gap-1 flex-1 justify-end">
          {myRank > 3 && myPlayer && (
            <>
              <span className="text-xs text-blue-300">#{myRank}</span>
              <img 
                src={getPlayerAvatar(myPlayer)}
                alt="You"
                className="w-6 h-6 rounded-full border border-blue-400 shadow-sm ring-1 ring-blue-400/30"
              />
              <span className="text-xs font-medium text-blue-200">
                {myPlayer.score}*
              </span>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

--- ./src/components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

--- ./src/components/ui/buttonVariants.ts ---
import { cva } from "class-variance-authority"

export const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
        success:
          "bg-green-500 text-white shadow-xs hover:bg-green-500/90 dark:bg-green-600 dark:hover:bg-green-600/90",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
--- ./src/components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

--- ./src/components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { buttonVariants } from "./buttonVariants"

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button }

--- ./src/components/PlayerList.tsx ---
// src/components/PlayerList.tsx
import { useGameStore } from '@/store/gameStore';
import type { Player } from '../../../common/types/game';

export function PlayerList() {
  const { players, activePlayerId } = useGameStore((state) => state.gameState);
  const myPlayerId = useGameStore((state) => state.playerId);

  // Get player avatar from their profile data
  const getPlayerAvatar = (player: Player) => {
    return `/avatars/${player.avatar || 1}.jpeg`;
  };


  // Sort players by score (descending)
  const sortedPlayers = [...players].sort((a, b) => b.score - a.score);

  return (
    <div className="bg-white/5 rounded-lg p-2 animate-fade-in">
      {/* Compact Header */}
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-sm font-medium text-[var(--color-text-primary)] flex items-center gap-1">
          🧑‍🤝‍🧑 Players ({players.length})
        </h3>
      </div>

      {/* Horizontal Player List */}
      <div className="flex gap-2 overflow-x-auto pb-1">
        {sortedPlayers.map((player, index) => {
          const isActivePlayer = player.id === activePlayerId;
          const isMe = player.id === myPlayerId;
          const avatarSrc = getPlayerAvatar(player);

          return (
            <div
              key={player.id}
              className={`flex-shrink-0 flex flex-col items-center gap-1 p-2 rounded-lg transition-all duration-200 min-w-[60px] ${
                isActivePlayer 
                  ? 'bg-gradient-to-b from-[var(--color-green-primary)]/20 to-[var(--color-blue-primary)]/20 border border-[var(--color-green-primary)]/30' 
                  : isMe
                    ? 'bg-gradient-to-b from-blue-500/20 to-purple-500/20 border border-blue-400/50 shadow-md'
                    : 'bg-white/5 border border-white/10'
              } ${isMe ? 'ring-2 ring-blue-400/30' : ''}`}
            >
              {/* Rank */}
              <div className="flex-shrink-0">
                {index === 0 ? (
                  <span className="text-sm">🥇</span>
                ) : index === 1 ? (
                  <span className="text-sm">🥈</span>
                ) : index === 2 ? (
                  <span className="text-sm">🥉</span>
                ) : (
                  <span className={`w-4 h-4 rounded-full flex items-center justify-center text-xs font-bold ${
                    isMe ? 'bg-blue-400/30 text-blue-200' : 'bg-white/20'
                  }`}>
                    {index + 1}
                  </span>
                )}
              </div>

              {/* Avatar */}
              <div className="flex-shrink-0">
                <img
                  src={avatarSrc}
                  alt={`${player.name}'s avatar`}
                  className={`w-6 h-6 rounded-full border transition-all duration-200 ${
                    isMe ? 'border-blue-400 shadow-sm' : 'border-white/20'
                  }`}
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = '/avatars/1.jpeg';
                  }}
                />
              </div>

              {/* Player Info */}
              <div className="text-center min-w-0">
                <div className={`text-xs font-medium truncate max-w-[50px] ${
                  isMe ? 'text-blue-200' : 'text-[var(--color-text-primary)]'
                }`}>
                  {player.name}
                  {isMe && <span className="text-blue-300">*</span>}
                </div>
                <div className={`text-xs font-bold ${
                  isMe ? 'text-blue-200' : 'text-[var(--color-text-primary)]'
                }`}>
                  {player.score}
                </div>
                {isActivePlayer && (
                  <span className="w-1 h-1 bg-[var(--color-green-primary)] rounded-full animate-pulse inline-block"></span>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

--- ./src/components/AnswerOptions.tsx ---
// src/components/AnswerOptions.tsx
import { useGameStore } from '@/store/gameStore';
import type { AnswerOption, Player } from '../../../common/types/game';
import { socketService } from '@/services/socketService';

export function AnswerOptions() {
  const { currentQuestion, status, activePlayerId, players } = useGameStore((state) => state.gameState);
  const myPlayerId = useGameStore((state) => state.playerId);

  if (!currentQuestion) return null;

  const handleSelectAnswer = (index: number) => {
    socketService.submitAnswer(index);
  };

  const isMyTurn = activePlayerId === myPlayerId;
  const isAnsweringPhase = status === 'Answering';

  const revealedCorrectAnswers = players.flatMap((p: Player) => p.roundAnswers);
  const revealedIncorrectAnswers = currentQuestion.revealedIncorrectAnswers || [];

  // Letter mapping for answer options
  const getAnswerLetter = (index: number) => String.fromCharCode(65 + index); // A, B, C, D...

  return (
    <div className="animate-scale-in flex-1 flex flex-col min-h-0">
      {/* 2-Column Answer Grid for Mobile */}
      <div className="grid grid-cols-2 gap-3 flex-1 content-start">
        {currentQuestion.options.map((option: AnswerOption, index: number) => {
          const isRevealedCorrect = revealedCorrectAnswers.includes(index);
          const isRevealedIncorrect = revealedIncorrectAnswers.includes(index);
          const isRevealed = isRevealedCorrect || isRevealedIncorrect;
          const isDisabled = !isAnsweringPhase || !isMyTurn || isRevealed;

          const getButtonClass = () => {
            if (isRevealedCorrect) return 'game-button-success';
            if (isRevealedIncorrect) return 'bg-gradient-to-r from-[var(--color-status-error)] to-[var(--color-pink-primary)] text-white font-medium rounded-xl px-3 py-4 opacity-50';
            if (isDisabled) return 'game-button-ghost opacity-50';
            return 'game-button-primary hover:scale-[1.02]';
          };

          const getIcon = () => {
            if (isRevealedCorrect) return '✅';
            if (isRevealedIncorrect) return '❌';
            return '';
          };

          return (
            <button
              key={index}
              onClick={() => handleSelectAnswer(index)}
              disabled={isDisabled}
              className={`${getButtonClass()} min-h-[80px] flex flex-col justify-center items-center text-center transition-all duration-200 ${!isDisabled ? 'active:scale-95' : ''}`}
            >
              <div className="flex flex-col items-center gap-2 w-full h-full justify-center">
                <span className="flex-shrink-0 w-6 h-6 bg-white/20 rounded-full flex items-center justify-center text-sm font-bold">
                  {getAnswerLetter(index)}
                </span>
                <span className="flex-1 text-sm font-medium leading-tight px-2 flex items-center">
                  {option.text}
                </span>
                {getIcon() && (
                  <span className="flex-shrink-0 text-lg">{getIcon()}</span>
                )}
              </div>
            </button>
          );
        })}
      </div>

    </div>
  );
}

--- ./src/components/QuestionDisplay.tsx ---
// src/components/QuestionDisplay.tsx
import { useGameStore } from '@/store/gameStore';

export function QuestionDisplay() {
  const question = useGameStore((state) => state.gameState.currentQuestion);

  if (!question) {
    return (
      <div className="game-card text-center animate-scale-in">
        <div className="flex items-center justify-center gap-2 mb-2">
          <span className="text-2xl">🎮</span>
          <span className="text-subtitle text-[var(--color-text-secondary)]">
            Waiting for the game to start...
          </span>
        </div>
        <div className="progress-bar">
          <div className="progress-fill progress-primary animate-glow" style={{ width: '50%' }} />
        </div>
      </div>
    );
  }


  return (
    <div className="bg-gradient-to-br from-[var(--color-background-accent)] to-[var(--color-background-secondary)] rounded-lg p-3 border border-white/5 animate-fade-in">
      {/* Very compact question text only */}
      <h2 className="text-sm font-medium text-[var(--color-text-primary)] leading-tight text-center">
        {question.question}
      </h2>
    </div>
  );
}

--- ./src/components/Header.tsx ---
// src/components/Header.tsx
import { useGameStore } from '@/store/gameStore';

export function Header() {
  const { status, currentRound, timer } = useGameStore((state) => state.gameState);
  // Remove this line since questions is not in GameState
  
  // Determine timer color based on time remaining
  const getTimerColor = (time: number) => {
    if (time > 10) return 'text-[var(--color-green-primary)]';
    if (time > 5) return 'text-[var(--color-orange-primary)]';
    return 'text-[var(--color-status-error)]';
  };


  return (
    <div className="game-card mb-6 animate-scale-in">
      {/* Top Status Bar */}
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-2">
          <span className="badge badge-primary">🔄 Round {currentRound}</span>
          <span className="badge badge-primary">
            🎯 Round {currentRound}
          </span>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-small text-[var(--color-text-secondary)]">
            🧑‍🤝‍🧑 Question {currentRound}
          </span>
        </div>
      </div>

      {/* Game Title */}
      <div className="text-center mb-4">
        <h1 className="text-hero bg-gradient-to-r from-[var(--color-blue-primary)] to-[var(--color-purple-primary)] bg-clip-text text-transparent">
          🎮 Smart10
        </h1>
        <p className="text-caption text-[var(--color-text-secondary)] mt-1">
          {status === 'Answering' ? 'Select all correct answers!' : status}
        </p>
      </div>

      {/* Timer and Progress */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span className="text-small text-[var(--color-text-secondary)]">⏳</span>
          <span className={`text-subtitle font-bold ${getTimerColor(timer)}`}>
            {timer}s remaining
          </span>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-small text-[var(--color-text-secondary)]">Progress</span>
          <div className="progress-bar w-20">
            <div 
              className="progress-fill progress-primary" 
              style={{ width: `${currentRound * 10}%` }}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

--- ./src/components/GameTopBar.tsx ---
// src/components/GameTopBar.tsx
import { useGameStore } from '@/store/gameStore';
import type { Player } from '../../../common/types/game';

export function GameTopBar() {
  const { currentQuestion, activePlayerId, players, currentRound, timer } = useGameStore((state) => state.gameState);
  const myPlayerId = useGameStore((state) => state.playerId);

  const isMyTurn = activePlayerId === myPlayerId;
  const activePlayer = players.find((p: Player) => p.id === activePlayerId);

  // Timer color based on time remaining
  const getTimerColor = (time: number) => {
    if (time > 10) return 'text-[var(--color-green-primary)]';
    if (time > 5) return 'text-[var(--color-orange-primary)]';
    return 'text-[var(--color-status-error)]';
  };

  if (!currentQuestion) return null;

  return (
    <div className="fixed top-0 left-0 right-0 glassmorphism border-b border-white/10 p-3 animate-slide-down z-50">
      <div className="flex items-center justify-between max-w-full mx-auto">
        {/* Left: Round info */}
        <div className="flex items-center gap-2 text-xs">
          <span className="text-[var(--color-blue-primary)] font-medium">R{currentRound}</span>
          <span className="text-[var(--color-text-secondary)]">•</span>
          <span className="text-[var(--color-text-secondary)]">{currentQuestion.category}</span>
        </div>

        {/* Center: Turn indicator */}
        <div className="flex items-center gap-2">
          {isMyTurn ? (
            <>
              <span className="w-2 h-2 bg-[var(--color-green-primary)] rounded-full animate-pulse"></span>
              <span className="text-sm text-[var(--color-green-primary)]">Your Turn</span>
            </>
          ) : (
            <>
              <span className="w-2 h-2 bg-[var(--color-text-accent)] rounded-full"></span>
              <span className="text-xs text-[var(--color-text-secondary)]">
                {activePlayer?.name || 'Waiting...'}
              </span>
            </>
          )}
        </div>

        {/* Right: Timer */}
        <div className="flex items-center gap-1">
          <span className="text-xs">⏱️</span>
          <span className={`text-xs font-bold ${getTimerColor(timer)}`}>
            {timer}s
          </span>
        </div>
      </div>
    </div>
  );
}

--- ./src/components/AdminPanel.tsx ---
// src/components/AdminPanel.tsx
import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { socketService } from '@/services/socketService';

export function AdminPanel() {
  const [password, setPassword] = React.useState('');

  const handleStart = () => {
    socketService.startGame(password);
  };

  const handleReset = () => {
    socketService.resetGame(password);
  };

  return (
    <Card className="mt-4">
      <CardHeader>
        <CardTitle>Admin Controls</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Input
          type="password"
          placeholder="Admin Password"
          value={password}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.target.value)}
        />
        <div className="flex flex-col space-y-4">
          <Button onClick={handleStart} className="w-full">Start Game</Button>
          <Button onClick={handleReset} variant="destructive" className="w-full">Reset Game</Button>
        </div>
      </CardContent>
    </Card>
  );
}

--- ./src/lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

--- ./src/store/gameStore.ts ---
// src/store/gameStore.ts
import { create } from 'zustand';
import type { GameState } from '../../../common/types/game';

interface GameStore {
  gameState: GameState;
  playerId: string | null;
  setGameState: (newState: GameState) => void;
  setPlayerId: (id: string) => void;
}

const initialState: GameState = {
  status: 'Waiting',
  players: [],
  currentQuestion: null,
  currentRound: 0,
  timer: 0,
  activePlayerId: null,
};

export const useGameStore = create<GameStore>((set) => ({
  gameState: initialState,
  playerId: null,
  setGameState: (newState) => set({ gameState: newState }),
  setPlayerId: (id) => set({ playerId: id }),
}));

--- ./src/main.tsx ---
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

--- ./src/index.css ---
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  /* Gaming Design System Radii */
  --radius-sm: 8px;
  --radius-md: 12px;
  --radius-lg: 16px;
  --radius-xl: 20px;
  --radius-2xl: 24px;
  --radius-full: 9999px;
  
  /* Gaming Color System */
  --color-background-base: #0A1628;
  --color-background-secondary: #1A2B3D;
  --color-background-accent: #2A3B4E;
  
  --color-blue-primary: #4A9EFF;
  --color-blue-secondary: #5CB3FF;
  --color-blue-accent: #6BC8FF;
  
  --color-purple-primary: #8B5CF6;
  --color-purple-secondary: #A78BFA;
  --color-purple-accent: #C4B5FD;
  
  --color-green-primary: #22C55E;
  --color-green-secondary: #4ADE80;
  --color-green-accent: #86EFAC;
  
  --color-orange-primary: #FB923C;
  --color-orange-secondary: #FDBA74;
  --color-orange-accent: #FED7AA;
  
  --color-pink-primary: #EC4899;
  --color-pink-secondary: #F472B6;
  --color-pink-accent: #F9A8D4;
  
  --color-text-primary: #FFFFFF;
  --color-text-secondary: #CBD5E1;
  --color-text-accent: #94A3B8;
  
  --color-status-success: #10B981;
  --color-status-warning: #F59E0B;
  --color-status-error: #EF4444;
  --color-status-info: #3B82F6;
  
  /* Spacing System */
  --space-xs: 4px;
  --space-sm: 8px;
  --space-md: 12px;
  --space-lg: 16px;
  --space-xl: 24px;
  --space-2xl: 32px;
  --space-3xl: 48px;
  
  /* Shadows */
  --shadow-soft: 0 2px 8px rgba(0, 0, 0, 0.15);
  --shadow-medium: 0 4px 16px rgba(0, 0, 0, 0.2);
  --shadow-strong: 0 8px 32px rgba(0, 0, 0, 0.3);
  --shadow-glow: 0 0 20px rgba(74, 158, 255, 0.4);
}

/* Gaming Theme Variables */
:root {
  /* Base Gaming Theme */
  --background: var(--color-background-base);
  --foreground: var(--color-text-primary);
  --card: var(--color-background-secondary);
  --card-foreground: var(--color-text-primary);
  --popover: var(--color-background-accent);
  --popover-foreground: var(--color-text-primary);
  --primary: var(--color-blue-primary);
  --primary-foreground: var(--color-text-primary);
  --secondary: var(--color-purple-primary);
  --secondary-foreground: var(--color-text-primary);
  --muted: var(--color-background-accent);
  --muted-foreground: var(--color-text-accent);
  --accent: var(--color-green-primary);
  --accent-foreground: var(--color-text-primary);
  --destructive: var(--color-status-error);
  --warning: var(--color-status-warning);
  --success: var(--color-status-success);
  --info: var(--color-status-info);
  --border: rgba(255, 255, 255, 0.1);
  --input: rgba(255, 255, 255, 0.1);
  --ring: var(--color-blue-accent);
}

@layer base {
  * {
    @apply border-white/10 outline-[var(--color-blue-accent)]/50;
  }
  
  body {
    @apply bg-[var(--color-background-base)] text-[var(--color-text-primary)];
    font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
    line-height: 1.4;
    font-weight: 500;
  }
  
  html {
    /* Mobile optimization */
    -webkit-text-size-adjust: 100%;
    -webkit-tap-highlight-color: transparent;
  }
}

@layer components {
  /* Gaming UI Components */
  .game-card {
    background: linear-gradient(135deg, var(--color-background-secondary), var(--color-background-accent));
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 16px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(10px);
  }
  
  .game-button-primary {
    background: linear-gradient(90deg, var(--color-blue-primary), var(--color-blue-secondary));
    color: white;
    font-weight: 500;
    border-radius: 20px;
    padding: 12px 24px;
    box-shadow: 0 4px 12px rgba(74, 158, 255, 0.3);
    transition: all 0.2s ease-in-out;
    border: none;
    cursor: pointer;
  }
  
  .game-button-primary:hover {
    box-shadow: 0 6px 16px rgba(74, 158, 255, 0.4);
    transform: translateY(-2px);
  }
  
  .game-button-primary:active {
    transform: translateY(0);
  }
  
  .game-button-secondary {
    background: linear-gradient(90deg, var(--color-purple-primary), var(--color-purple-secondary));
    color: white;
    font-weight: 500;
    border-radius: 20px;
    padding: 12px 24px;
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
    transition: all 0.2s ease-in-out;
    border: none;
    cursor: pointer;
  }
  
  .game-button-secondary:hover {
    box-shadow: 0 6px 16px rgba(139, 92, 246, 0.4);
    transform: translateY(-2px);
  }
  
  .game-button-success {
    background: linear-gradient(90deg, var(--color-green-primary), var(--color-green-secondary));
    color: white;
    font-weight: 500;
    border-radius: 20px;
    padding: 12px 24px;
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
    transition: all 0.2s ease-in-out;
    border: none;
    cursor: pointer;
  }
  
  .game-button-success:hover {
    box-shadow: 0 6px 16px rgba(34, 197, 94, 0.4);
    transform: translateY(-2px);
  }
  
  .game-button-ghost {
    background: rgba(255, 255, 255, 0.1);
    color: var(--color-text-secondary);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    padding: 12px 24px;
    transition: all 0.2s ease-in-out;
    cursor: pointer;
  }
  
  .game-button-ghost:hover {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }
  
  .progress-bar {
    width: 100%;
    height: 6px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 9999px;
    overflow: hidden;
  }
  
  .progress-fill {
    height: 100%;
    border-radius: 9999px;
    transition: width 0.3s ease-in-out;
  }
  
  .progress-primary {
    background: linear-gradient(90deg, var(--color-blue-primary), var(--color-blue-secondary));
  }
  
  .progress-success {
    background: linear-gradient(90deg, var(--color-green-primary), var(--color-green-secondary));
  }
  
  .progress-warning {
    background: linear-gradient(90deg, var(--color-orange-primary), var(--color-orange-secondary));
  }
  
  .badge {
    display: inline-flex;
    align-items: center;
    padding: 4px 8px;
    border-radius: 9999px;
    font-size: 12px;
    font-weight: 500;
  }
  
  .badge-primary {
    background: linear-gradient(90deg, var(--color-blue-primary), var(--color-blue-secondary));
    color: white;
  }
  
  .badge-secondary {
    background: rgba(255, 255, 255, 0.1);
    color: var(--color-text-secondary);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .badge-success {
    background: linear-gradient(90deg, var(--color-green-primary), var(--color-green-secondary));
    color: white;
  }
  
  .glassmorphism {
    backdrop-filter: blur(20px);
    background: rgba(26, 43, 61, 0.8);
  }
  
  /* Mobile Game Layout */
  .mobile-screen {
    min-height: 100vh;
    background: var(--color-background-base);
    padding: 8px;
    padding-top: 48px;
  }
  
  .mobile-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 24px;
  }
  
  .mobile-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 0 4px;
  }
  
  /* Typography Scales */
  .text-hero {
    font-size: 32px;
    font-weight: 800;
    line-height: 1.1;
    letter-spacing: -0.02em;
  }
  
  .text-title {
    font-size: 24px;
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: -0.01em;
  }
  
  .text-subtitle {
    font-size: 18px;
    font-weight: 600;
    line-height: 1.3;
  }
  
  .text-body {
    font-size: 16px;
    font-weight: 500;
    line-height: 1.4;
  }
  
  .text-caption {
    font-size: 14px;
    font-weight: 400;
    line-height: 1.4;
  }
  
  .text-small {
    font-size: 12px;
    font-weight: 500;
    line-height: 1.3;
  }
}

@layer utilities {
  .animate-fade-in {
    animation: fadeIn 0.3s ease-out;
  }
  
  .animate-scale-in {
    animation: scaleIn 0.2s ease-out;
  }
  
  .animate-slide-up {
    animation: slideUp 0.3s ease-out;
  }
  
  .animate-slide-down {
    animation: slideDown 0.3s ease-out;
  }
  
  .animate-glow {
    animation: glow 2s ease-in-out infinite;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(100%);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes slideDown {
  from {
    transform: translateY(-100%);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(74, 158, 255, 0.4);
  }
  50% {
    box-shadow: 0 0 30px rgba(74, 158, 255, 0.6);
  }
}

--- ./src/services/socketService.ts ---
// src/services/socketService.ts
import type { GameState, Player } from '../../../common/types/game';
import type { WebSocketMessage } from '../../../common/types/messages';
import { useGameStore } from '../store/gameStore';

const WEBSOCKET_URL = process.env.NODE_ENV === "development"
  ? 'ws://localhost:3001' :
  window.location.origin.replace(/^http/, "ws");

let socket: WebSocket | null = null;
let playerId: string | null = null; // Store player ID locally in the service

function connect(): void {
  if (socket && (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING)) {
    console.log('WebSocket is already connected or connecting.');
    return;
  }

  socket = new WebSocket(WEBSOCKET_URL);

  socket.onopen = () => {
    console.log('WebSocket connection established.');
    // If we have a player ID, maybe we need to re-identify? For now, we don't.
  };

  socket.onmessage = (event) => {
    try {
      const message: WebSocketMessage<unknown> = JSON.parse(event.data);
      console.log('Received message:', message);

      switch (message.type) {
        case 'game_state_update':
          useGameStore.getState().setGameState(message.payload as GameState);
          break;
        case 'player_joined': {
          const player = message.payload as Player;
          playerId = player.id;
          useGameStore.getState().setPlayerId(player.id);
          break;
        }
        case 'error':
          console.error('Server error:', (message.payload as { message: string }).message);
          break;
        default:
          console.warn('Unhandled message type:', message.type);
      }
    } catch (error) {
      console.error('Failed to parse server message:', error);
    }
  };

  socket.onclose = () => {
    console.log('WebSocket connection closed. Attempting to reconnect...');
    setTimeout(connect, 3000);
  };

  socket.onerror = (error) => {
    console.error('WebSocket error:', error);
    socket?.close();
  };
}

function sendMessage<T>(type: string, payload: T): void {
  if (!socket || socket.readyState !== WebSocket.OPEN) {
    console.error('WebSocket is not connected.');
    return;
  }
  const message: WebSocketMessage<T> = { type, payload };
  socket.send(JSON.stringify(message));
}

// --- Public API for the service ---

export const socketService = {
  connect,
  getPlayerId: () => playerId,
  joinGame: (profileData: { id: string; name: string; avatar: number }) => {
    sendMessage('player_join', profileData);
  },
  startGame: (password: string) => {
    sendMessage('admin_start_game', { password });
  },
  resetGame: (password: string) => {
    sendMessage('admin_reset_game', { password });
  },
  submitAnswer: (answerIndex: number) => {
    sendMessage('submit_answer', { answerIndex });
  },
  passTurn: () => {
    sendMessage('pass_turn', {});
  },
};

--- ./src/vite-env.d.ts ---
/// <reference types="vite/client" />

--- ./src/views/FinishedView.tsx ---
// src/views/FinishedView.tsx
import { Scoreboard } from '@/components/Scoreboard';
import { useGameStore } from '@/store/gameStore';
import type { Player } from '../../../common/types/game';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { socketService } from '@/services/socketService';
import { useState, useEffect } from 'react';

export function FinishedView() {
  const { players } = useGameStore((state) => state.gameState);
  const playerId = useGameStore((state) => state.playerId);
  const winner = players.sort((a: Player, b: Player) => b.score - a.score)[0];
  const [timeLeft, setTimeLeft] = useState(60);
  const [gameRestartDelay, setGameRestartDelay] = useState(60);

  const currentPlayer = players.find((p: Player) => p.id === playerId);

  useEffect(() => {
    // Fetch config from backend
    fetch('/api/config')
      .then(res => res.json())
      .then(config => {
        setGameRestartDelay(config.gameRestartDelaySeconds);
        setTimeLeft(config.gameRestartDelaySeconds);
      })
      .catch(err => {
        console.warn('Failed to fetch config, using default:', err);
        setGameRestartDelay(60);
        setTimeLeft(60);
      });
  }, []);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [gameRestartDelay]);

  const handleAutoJoinNext = () => {
    if (currentPlayer) {
      socketService.joinGame({
        id: currentPlayer.id,
        name: currentPlayer.name,
        avatar: currentPlayer.avatar
      });
    }
  };

  return (
    <div className="container mx-auto p-4 max-w-2xl text-center">
      <Card>
        <CardHeader>
          <CardTitle className="text-4xl font-bold">Game Over!</CardTitle>
        </CardHeader>
        <CardContent>
          {winner && (
            <p className="text-2xl mb-4">
              Congratulations, <span className="font-bold text-primary">{winner.name}</span>!
            </p>
          )}
          <Scoreboard />
          <div className="mt-6 space-y-4">
            <div className="text-center">
              <p className="text-lg font-medium">Next game starts in:</p>
              <p className="text-3xl font-bold text-primary">{timeLeft}s</p>
            </div>
            <Button
              onClick={handleAutoJoinNext}
              disabled={!currentPlayer?.name}
              className="w-full"
            >
              Join Next Game
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

--- ./src/views/ResultsView.tsx ---
// src/views/ResultsView.tsx
import { GameTopBar } from '@/components/GameTopBar';
import { Scoreboard } from '@/components/Scoreboard';
import { QuestionDisplay } from '@/components/QuestionDisplay';
import { useGameStore } from '@/store/gameStore';
import type { AnswerOption } from '../../../common/types/game';

export function ResultsView() {
  const { currentQuestion } = useGameStore((state) => state.gameState);

  // Letter mapping for answer options
  const getAnswerLetter = (index: number) => String.fromCharCode(65 + index); // A, B, C, D...

  return (
    <div className="min-h-screen flex flex-col pt-1 pb-2">
      <GameTopBar />

      {/* Scoreboard section */}
      <div className="px-4 flex-1">
        <Scoreboard />
      </div>
      {/* Question section */}
      <div className="flex-shrink-0 px-4 pt-1 pb-2">
        <QuestionDisplay />
      </div>

      {/* Results content */}
      <div className="flex-1 px-1 flex flex-col gap-4">
        {/* Correct answers section */}
        {currentQuestion && (
          <div className="px-4">
            <h3 className="text-sm font-medium text-[var(--color-text-secondary)] mb-3 text-center">
              Correct Answers
            </h3>
            <div className="grid grid-cols-2 gap-3">
              {currentQuestion.options.map((option: AnswerOption, index: number) => (
                <div
                  key={index}
                  className={`min-h-[80px] flex flex-col justify-center items-center text-center transition-all duration-200 rounded-xl px-3 py-4 border ${option.isCorrect
                      ? 'game-button-success'
                      : 'bg-gradient-to-r from-[var(--color-background-accent)] to-[var(--color-background-secondary)] border-white/10 opacity-50'
                    }`}
                >
                  <div className="flex flex-col items-center gap-2 w-full h-full justify-center">
                    <span className="flex-shrink-0 w-6 h-6 bg-white/20 rounded-full flex items-center justify-center text-sm font-bold">
                      {getAnswerLetter(index)}
                    </span>
                    <span className="flex-1 text-sm font-medium leading-tight px-2 flex items-center">
                      {option.text}
                    </span>
                    {option.isCorrect && (
                      <span className="flex-shrink-0 text-lg">✅</span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

      </div>
    </div>
  );
}

--- ./src/views/LobbyView.tsx ---
// src/views/LobbyView.tsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { PlayerList } from '@/components/PlayerList';
import { Profile, type ProfileData } from '@/components/Profile';
import { socketService } from '@/services/socketService';
import { useGameStore } from '@/store/gameStore';
import type { Player } from '../../../common/types/game';

export function LobbyView() {
  const [userProfile, setUserProfile] = useState<ProfileData | null>(null);
  const { players, status } = useGameStore((state) => state.gameState);
  const { playerId } = useGameStore((state) => state);
  const myPlayer = players.find((p: Player) => p.id === playerId);

  const handleProfileComplete = (profile: ProfileData) => {
    setUserProfile(profile);
  };

  const handleJoinGame = () => {
    if (userProfile) {
      socketService.joinGame(userProfile);
    }
  };

  const getTitle = () => {
    if (status === 'Waiting') {
      return 'Waiting for Game to Start';
    }
    return myPlayer ? 'You can join the current game!' : 'Game in Progress - Join Now!';
  };

  return (
    <div className="container mx-auto p-4 max-w-4xl">
      <h1 className="text-3xl font-bold text-center mb-6">{getTitle()}</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="space-y-4">
          <Profile 
            onProfileComplete={handleProfileComplete}
            disabled={!!myPlayer}
          />
          {userProfile && (
            <Button 
              onClick={handleJoinGame} 
              className="w-full" 
              disabled={!!myPlayer}
            >
              {myPlayer ? 'Joined!' : status === 'Waiting' ? 'Join Game' : 'Join Current Game'}
            </Button>
          )}
        </div>
        <div>
          <PlayerList />
        </div>
      </div>
    </div>
  );
}

--- ./src/views/GameView.tsx ---
// src/views/GameView.tsx
import { Header } from '@/components/Header';
import { PlayerList } from '@/components/PlayerList';
import { QuestionDisplay } from '@/components/QuestionDisplay';
import { AnswerOptions } from '@/components/AnswerOptions';
import { GameActions } from '@/components/GameActions';
import { GameTopBar } from '@/components/GameTopBar';
import { useGameStore } from '@/store/gameStore';

export function GameView() {
  const { status } = useGameStore((state) => state.gameState);

  const isGameActive = status === 'Answering' || status === 'Results';

  // Always use focused layout when game is active
  if (isGameActive) {
    return (
      <div className="min-h-screen flex flex-col pt-1 pb-2">
        <GameTopBar />

        {/* Question section */}
        <div className="flex-shrink-0 px-4 pt-1 pb-2">
          <QuestionDisplay />
        </div>

        {/* Answer section */}
        <div className="flex-1 px-1">
          <AnswerOptions />
        </div>

        <GameActions />
      </div>
    );
  }

  // Fallback to default layout for lobby/waiting states
  return (
    <div className="mobile-content pb-20 min-h-screen flex flex-col gap-3">
      <Header />

      {/* Very compact question section */}
      <div className="flex-shrink-0">
        <QuestionDisplay />
      </div>

      {/* Large answer section - takes most of the remaining space */}
      <div className="flex-1 flex flex-col min-h-0">
        <AnswerOptions />
      </div>

      {/* Player list */}
      <div className="flex-shrink-0">
        <PlayerList />
      </div>

      <GameActions />
    </div>
  );
}

--- ./src/App.tsx ---
// src/App.tsx
import { useEffect } from 'react';
import { useGameStore } from './store/gameStore';
import { socketService } from './services/socketService';
import { LobbyView } from './views/LobbyView';
import { GameView } from './views/GameView';
import { ResultsView } from './views/ResultsView';
import { FinishedView } from './views/FinishedView';
import './App.css';

function App() {
  const { status } = useGameStore((state) => state.gameState);
  const { playerId } = useGameStore((state) => state);

  useEffect(() => {
    socketService.connect();
  }, []);

  const renderView = () => {
    // If user hasn't joined yet, always show lobby
    if (!playerId) {
      return <LobbyView />;
    }

    switch (status) {
      case 'Waiting':
        return <LobbyView />;
      case 'Answering':
        return <GameView />;
      case 'Results':
        return <ResultsView />;
      case 'Finished':
        return <FinishedView />;
      default:
        return <div>Connecting to server...</div>;
    }
  };

  return (
    <div className="mobile-screen">
      <main className="animate-fade-in">{renderView()}</main>
    </div>
  );
}

export default App;
--- ./src/App.css ---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--- ./tsconfig.app.json ---
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": [
      "ES2022",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@/common/*": [
        "../common/*"
      ]
    }
  },
  "composite": true,
  "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue"
  ],
  "exclude": []
}

--- ./print_codebase.sh ---
#!/bin/bash
find . -type f -not -path "./node_modules/*" -not -path "./dist/*" -not -path "./.git/*" -not -path "./public/avatars/*" -not -path "./.claude/*" -not -name "pnpm-lock.yaml" -not -name "files.txt" -not -name "CHANGES.md" -not -name "*.svg" -not -name "*.jpeg" -not -name "codebase.txt" -print0 | xargs -0 -I {} sh -c 'echo "--- {} ---"; cat "{}"; echo' > codebase.txt

--- ./components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
--- ./vite.config.ts ---
import path from "path"
import tailwindcss from "@tailwindcss/vite"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
      "@/common": path.resolve(__dirname, "../common"),
    },
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
      },
    },
  },
})

--- ./index.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

--- ./tsconfig.node.json ---
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

--- ./README.md ---
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

--- ./eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])

--- ./.gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--- ./tsconfig.json ---
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  }
}

